<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>二分搜索及其边界查找</title>
    <link href="/posts/4081649024.html"/>
    <url>/posts/4081649024.html</url>
    
    <content type="html"><![CDATA[<p>时隔接近两个月，第二篇vlog</p><span id="more"></span><h2 id="二分查找及其拓展"><a href="#二分查找及其拓展" class="headerlink" title="二分查找及其拓展"></a>二分查找及其拓展</h2><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><h4 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a><strong>算法介绍</strong></h4><p>是一种在有序数组中查找某一特定元素的搜索算法。搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特</p><p>定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表</p><p>找不到。这种搜索算法每一次比较都使搜索范围缩小一半</p><h4 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a><strong>算法步骤</strong></h4><ol><li><p>首先确定整个查找区间的中间位置 mid &#x3D; （ left + right ）&#x2F;2 。</p></li><li><p>用待查关键字值与中间位置的关键字值进行比较， 若相等，则查找成功　 若大于，则在后（右）半个区域继续进行折半查找　 若小于，则在前</p><p>（左）半个区域继续进行折半查找。</p></li><li><p>对确定的缩小区域再按折半公式，重复上述步骤。最后，得到结果：要么查找成功， 要么查找失败。折半查找的存储结构采用一维数组存</p></li></ol><p><img src="http://zhangjunxian.oss-cn-guangzhou.aliyuncs.com/img/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.gif" alt="二分查找"></p><h4 id="两种模板"><a href="#两种模板" class="headerlink" title="两种模板"></a>两种模板</h4><p>二分查找常见的有两种模板</p><ul><li><p>左闭右开区间 指的是</p><p>初始条件为 ：<strong>left &#x3D; 0  、right &#x3D; n</strong>  </p><p>结束条件为 ：<strong>l  &lt;  r</strong></p></li><li><p>左闭右闭区间 指的是</p><p>初始条件为： <strong>left &#x3D; 0 、right &#x3D; n-1</strong> </p><p>结束条件为 ：<strong>l &lt;&#x3D;r</strong></p></li></ul><h5 id="第一种模板"><a href="#第一种模板" class="headerlink" title="第一种模板"></a><strong>第一种模板</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">        左闭右开 [left, right) 结束循环条件为 l &lt; r</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = arr.length, m;<br><br>    <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>        m = (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(arr[m] == target)&#123;<br>            <span class="hljs-keyword">return</span> m;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[m] &gt; target)&#123;<br>            r = m;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            l = m + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="第二种模板"><a href="#第二种模板" class="headerlink" title="第二种模板"></a>第二种模板</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    左闭右开 [left, right] 结束循环条件为 l &lt;= r</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch1</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = arr.length - <span class="hljs-number">1</span>, m;<br><br>    <span class="hljs-keyword">while</span>(l &lt;= r)&#123;<br>        m = (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(arr[m] == target)&#123;<br>            <span class="hljs-keyword">return</span> m;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[m] &gt; target)&#123;<br>            r = m - <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            l = m + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="如何理解这两种写法"><a href="#如何理解这两种写法" class="headerlink" title="如何理解这两种写法"></a>如何理解这两种写法</h4><p>对于第一种写法实际上是 左闭右开区间，实际上指的是在二分数组的时候将数组划分为**[left,mid)** 和 <strong>[mid, right)</strong>  </p><p>所以说初始条件设置为 left &#x3D; 0, right &#x3D; n  结束条件为 l &lt; r  因为 l &#x3D;&#x3D; r 是 说明此时所有区间已经搜索完了</p><p>因此 当 <strong>arr[mid]  &gt; target</strong> 时，说明此时 target 在  <strong>[left,mid)</strong> 区间中 所以 <strong>right &#x3D; mid</strong></p><p>同理 当 <strong>arr[mid] &lt; target</strong> 时，说明此时 target 在 <strong>[mid, right)</strong> 区间中，所以 <strong>left &#x3D; mid + 1</strong></p><p>对于第二种写法，同理。</p><h3 id="二分查找的拓展"><a href="#二分查找的拓展" class="headerlink" title="二分查找的拓展"></a>二分查找的拓展</h3><h4 id="查找边界值两种模板"><a href="#查找边界值两种模板" class="headerlink" title="查找边界值两种模板"></a>查找边界值两种模板</h4><p>同样的也是分成<strong>左闭右开区间</strong>和<strong>左闭右闭区间</strong></p><h5 id="第一种模板-1"><a href="#第一种模板-1" class="headerlink" title="第一种模板"></a>第一种模板</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">采用左闭右闭区间[left,right)，结束条件为 l &lt; r</span><br><span class="hljs-comment">寻找第一个不小于target的值，</span><br><span class="hljs-comment">[1,2,5,5,5,7] target = 5返回第一个5的index</span><br><span class="hljs-comment">[1,2,5,7,7,8] target = 6 返回第一个7的index</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch_Left</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> target)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = arr.length, m;<br>    <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>       m = l + (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(arr[m] &lt; target) l = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> r = m;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">采用左闭右闭区间[left,right)，结束条件为 l &lt; r</span><br><span class="hljs-comment">寻找最后一个不大于target的值，</span><br><span class="hljs-comment">[1,2,5,5,5,7] target = 5返回最后一个5的index</span><br><span class="hljs-comment">[1,2,5,7,7,8] target = 6 返回第一个5的index</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch_right</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> target)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = arr.length, m;<br><span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>m = l + (r - l) / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(arr[m] &lt;= target) l = m + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> r = m;<br>&#125;<br><span class="hljs-keyword">return</span>  l;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="第二种模板-1"><a href="#第二种模板-1" class="headerlink" title="第二种模板"></a>第二种模板</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">采用左闭右闭区间[left,right],结束条件为 l &lt;= r</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch_Left</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = arr.length - <span class="hljs-number">1</span>, m;<br>    <span class="hljs-keyword">while</span>(l &lt;= r)&#123;<br>m = l + (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(arr[m] &lt; target) l = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> r = m - <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(arr[l] == target) <span class="hljs-keyword">return</span> l;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch_right</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = arr.length, m;<br>    <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>        m = l + (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(arr[m] &lt;= target) l = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> r = m;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(arr[r] == target) <span class="hljs-keyword">return</span> r;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="如何理解"><a href="#如何理解" class="headerlink" title="如何理解"></a>如何理解</h4><p>关键是如何理解查找边界值问题，在理解之后，才能够在面对问题时快速写出解决问题的办法。</p><p>上述模板中实际上关键就在于判断条件该如何写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(arr[m] &lt; target)<br></code></pre></td></tr></table></figure><p>给定一个数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>]<br></code></pre></td></tr></table></figure><p>给定一个条件 x &lt; 4，那么数组将会被划分成两种状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>]<br></code></pre></td></tr></table></figure><p>那么我们寻找边界值实际上寻找的就是处于两种状态的边界值。</p><p>以寻找第一个不小于4的值，那么我们寻找的应该是有尖括号的false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>,&lt;<span class="hljs-literal">false</span>&gt;,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>]<br></code></pre></td></tr></table></figure><p>那么该怎样找到这个处于边界的false</p><p>首先以左闭右开区间为例子（实际上是一样的，区分左闭右开和左闭右闭，是为了二分划分区间时不重合），要划分这个区间 </p><p>当 <strong>arr[mid] &lt; 4</strong> 时 说明此时 </p><p><strong>[left,mid)</strong> 为<strong>true</strong>  <strong>[mid, right)</strong> 为<strong>false</strong>，说明此时 <strong>false</strong> 位于 <strong>[mid, right)</strong> 区间，也可以理解为此时你还没有找到第一个true 所以要往右走 所以说此时 <strong>left &#x3D; mid + 1</strong></p><p>也可以反过来理解当 <strong>arr[mid] &gt;&#x3D;4</strong>  时数组被划分为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-literal">false</span>,<span class="hljs-literal">false</span>,&lt;<span class="hljs-literal">true</span>&gt;,<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">true</span>]<br></code></pre></td></tr></table></figure><p>此时说明 <strong>[left,mid)<strong>为</strong>false</strong>， <strong>[mid, right)</strong> 为 true， 由于你要找的是第一个true 所以说应该继续往左走 <strong>right &#x3D; mid</strong></p><p><strong>其他情况同理</strong>。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>二分看上去很简单，但是细节很难。在各个模板中，所以的<strong>左闭右开</strong>、<strong>左闭右闭</strong>。实际上要<strong>解决</strong>的就是在将一个区间划分为两个区间时，如何使得两个区间不重合的<strong>问题</strong>。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇blog，国庆节感悟</title>
    <link href="/posts/2954685041.html"/>
    <url>/posts/2954685041.html</url>
    
    <content type="html"><![CDATA[<p>这是我的第一篇blog，希望以后能坚持下去。</p><span id="more"></span><p>现在是凌晨的1点，回到家又开始习惯性的熬夜，虽然在学校也是这样。但是回到家似乎变得更加的放纵。不知道从什么时候开始，不知不觉的养成了这个坏习惯，每天到了晚上的十一点左右开始，我就一点学习的想法都没有，我只想打开一部电视剧，然后一边看一边吃宵夜。然后吃完宵夜就一边看电视剧一边玩手机，直至上床睡觉。这个习惯给我带来了许多严重的后果，比如说我的体重不断地增加，我的自制力不断地下降（好吧，其实原本自制力也就这样），我曾试过很多次说明天晚上要干嘛干嘛，结果到了十一点，又打开了电视剧，吃起了宵夜。这个坏习惯是真的难受。为什么会养成这种习惯，我也不知道，很奇怪的是在这个点我一点打游戏的欲望都没有，我就想看电视剧….。可能这是我的懒惰性作怪？这个坏习惯什么时候能改掉？</p><p>今天是国庆假期的最后一天，回到家又啥都没做，明明回来之前已经计划好，学完《汇编语言》这本书，然后开始学习操作系统的课程。真的是太难了，不知道为什么回到家我就啥都不想干了，每天打开电脑又不想看，然后就跑去刷知乎、刷抖音，将我的笔记本又原来的win10系统，变成win10+ubuntu双系统，又变成win11系统，总之就是没事找事干。看到表弟在用Hexo搭建blog，我觉得搭建一个blog也不错，于是乎就跟着网上的教程搭建了这个blog，也就有了这第一篇blog，明天就要上学了，很快这个十月份就要过去了，很快这个学期就结束了，但是开学定下的目标好像也没完成多少。</p><p>我希望的是能够通过这个blog记录下我学习的东西，以及记录我的日记总结，督促自己不要摆烂。希望能够坚持写下去。</p><p>好吧晚了，要睡觉了，明天还要收拾行李。最后想说的是原来写blog也挺麻烦的，对于语文不好的我来说，组织语言也太难了。</p>]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/1243066710.html"/>
    <url>/posts/1243066710.html</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
