<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>二分搜索及其边界查找</title>
    <link href="/posts/4081649024.html"/>
    <url>/posts/4081649024.html</url>
    
    <content type="html"><![CDATA[<p>时隔接近两个月，第二篇vlog</p><p>时隔两年的，第一次更新，之前的有点小问题，改了一下，引入了循环不变量的概念。</p><span id="more"></span><h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a><strong>算法介绍</strong></h2><p>是一种在有序数组中查找某一特定元素的搜索算法。搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特</p><p>定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组为空，则代表</p><p>找不到。这种搜索算法每一次比较都使搜索范围缩小一半</p><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a><strong>算法步骤</strong></h2><ol><li><p>首先确定整个查找区间的中间位置 mid &#x3D; （ left + right ）&#x2F;2 。</p></li><li><p>用待查关键字值与中间位置的关键字值进行比较， 若相等，则查找成功　 若大于，则在后（右）半个区域继续进行折半查找　 若小于，则在前</p><p> （左）半个区域继续进行折半查找。</p></li><li><p>对确定的缩小区域再按折半公式，重复上述步骤。最后，得到结果：要么查找成功， 要么查找失败。折半查找的存储结构采用一维数组存</p></li></ol><p><img src="http://zhangjunxian.oss-cn-guangzhou.aliyuncs.com/img/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.gif" alt="二分查找"></p><h2 id="两种模板"><a href="#两种模板" class="headerlink" title="两种模板"></a>两种模板</h2><p>二分查找常见的有两种模板</p><ul><li><p>左闭右开区间 指的是</p><p>初始条件为 ：<strong>left &#x3D; 0  、right &#x3D; n</strong>  </p><p>结束条件为 ：<strong>l  &lt;  r</strong></p></li><li><p>左闭右闭区间 指的是</p><p>初始条件为： <strong>left &#x3D; 0 、right &#x3D; n-1</strong> </p><p>结束条件为 ：<strong>l &lt;&#x3D;r</strong></p></li></ul><h3 id="第一种模板"><a href="#第一种模板" class="headerlink" title="第一种模板"></a><strong>第一种模板</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">        左闭右开 [left, right) 结束循环条件为 l &lt; r</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = arr.length, m;<br><br>    <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>        m = (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(arr[m] == target)&#123;<br>            <span class="hljs-keyword">return</span> m;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[m] &gt; target)&#123;<br>            r = m;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            l = m + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="第二种模板"><a href="#第二种模板" class="headerlink" title="第二种模板"></a>第二种模板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    左闭右开 [left, right] 结束循环条件为 l &lt;= r</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch1</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = arr.length - <span class="hljs-number">1</span>, m;<br><br>    <span class="hljs-keyword">while</span>(l &lt;= r)&#123;<br>        m = (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(arr[m] == target)&#123;<br>            <span class="hljs-keyword">return</span> m;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[m] &gt; target)&#123;<br>            r = m - <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            l = m + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="如何理解这两种写法"><a href="#如何理解这两种写法" class="headerlink" title="如何理解这两种写法"></a>如何理解这两种写法</h3><p>对于第一种写法实际上是 左闭右开区间，实际上指的是在二分数组的时候将数组划分为<br><code>[left,mid)</code> 和 <code>[mid, right)</code></p><p>所以说初始条件设置为 <code>left = 0</code>, <code>right = n</code>  结束条件为 l &lt; r  因为 l &#x3D;&#x3D; r 是 说明此时所有区间已经搜索完了</p><p>因此 当 <code>arr[mid]  &gt; target</code> 时，说明此时 <code>target</code> 在  <code>[left,mid)</code> 区间中 所以 <code>right = mid</code></p><p>同理 当 <code>arr[mid] &lt; target</code> 时，说明此时 <code>target</code> 在 <code>[mid, right)</code> 区间中，所以 <code>left = mid + 1</code></p><p>对于第二种写法，同理。</p><h2 id="二分查找的拓展"><a href="#二分查找的拓展" class="headerlink" title="二分查找的拓展"></a>二分查找的拓展</h2><h3 id="第一种模板-1"><a href="#第一种模板-1" class="headerlink" title="第一种模板"></a>第一种模板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">采用左闭右闭区间[left,right)，结束条件为 l &lt; r</span><br><span class="hljs-comment">寻找第一个大于等于target的值，</span><br><span class="hljs-comment">[1,2,5,5,5,7] target = 5返回第一个5的index</span><br><span class="hljs-comment">[1,2,5,7,7,8] target = 6 返回第一个7的index</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lower_bound</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> target)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = arr.length, m;<br>    <span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>       m = l + (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(arr[m] &lt; target) l = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> r = m;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">采用左闭右开区间[left,right)，结束条件为 l &lt; r</span><br><span class="hljs-comment">寻找第一个大于target的值，</span><br><span class="hljs-comment">[1,2,5,5,5,7] target = 5返回最后一个7的index</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">upper_bound</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> target)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = arr.length, m;<br><span class="hljs-keyword">while</span>(l &lt; r)&#123;<br>m = l + (r - l) / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(arr[m] &lt;= target) l = m + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> r = m;<br>&#125;<br><span class="hljs-keyword">return</span>  l;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第二种模板-1"><a href="#第二种模板-1" class="headerlink" title="第二种模板"></a>第二种模板</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">采用左闭右闭区间[left,right],结束条件为 l &lt;= r</span><br><span class="hljs-comment">寻找第一个大于等于target的值</span><br><span class="hljs-comment">[1,2,5,5,5,7] target = 5返回第一个5的index</span><br><span class="hljs-comment">[1,2,5,7,7,8] target = 6 返回第一个7的index</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lower_bound</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = arr.length - <span class="hljs-number">1</span>, m;<br>    <span class="hljs-keyword">while</span>(l &lt;= r)&#123;<br>m = l + (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(arr[m] &lt; target) l = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> r = m - <span class="hljs-number">1</span>;<br>    &#125;<br><span class="hljs-keyword">return</span> l; <span class="hljs-comment">// return r + 1</span><br>&#125;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">采用左闭右闭区间[left,right]，结束条件为 l &lt;= r</span><br><span class="hljs-comment">寻找第一个大于target的值，</span><br><span class="hljs-comment">[1,2,5,5,5,7] target = 5返回最后一个7的index</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">upper_bound</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = arr.length - <span class="hljs-number">1</span>, m;<br>    <span class="hljs-keyword">while</span>(l &lt;= r)&#123;<br>        m = l + (r - l) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(arr[m] &lt;= target) l = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> r = m - <span class="hljs-number">1</span>;<br>    &#125;<br><span class="hljs-keyword">return</span> l; <span class="hljs-comment">// return r + 1    </span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="如何理解"><a href="#如何理解" class="headerlink" title="如何理解"></a>如何理解</h3><p>从<strong>循环不变式</strong>的角度出发，就能够清晰的明白二分的原理。</p><blockquote><p>循环不变式是在循环体的每次执行前后均为真的谓词。循环不变式体现了循环程序中循环变量的变化规律 。</p><p>条件：循环不等式，在初始、迭代、终止都恒为真</p></blockquote><p>对于lower_bound,它想查找目标是<strong>第一个大于等于target的元素</strong>,这里假如target为4，那么结果应该就是箭头所指的元素。<br><img src="https://zhangjunxian.oss-cn-guangzhou.aliyuncs.com/img/20240604164923.png" alt="image.png"><br><strong>定义循环不变式</strong>：<strong>l左边的元素是恒小于target，r及r右边的元素是恒大于等于target</strong><br><strong>定义初始值</strong>：<code>l = 0, r = n</code>，满足循环不变式，此时循环不变式覆盖的数组的范围最小。<br><strong>终止条件</strong>：<code>l &lt; r</code>, 即终止时，l &#x3D;&#x3D; r，此时满足循环不变式，l和r所指向的位置就是我们要找的目标。</p><p>当 <code>arr[m] &lt; target</code> 为 <code>true</code>时，我们能够确认的是<strong>左区域是小于target，因此 <code>l = m + 1</code><strong>。<br>当 <code>arr[m] &gt;= target</code>为<code>true</code>时，我们能够确认的是</strong>右区域是大于等于target, 因此 <code>r = m</code></strong><br>当 <code>l == r</code>时，此时循环结束，<code>l</code> 和 <code>r</code> 指向的就是我们要的结果。</p><p><img src="https://zhangjunxian.oss-cn-guangzhou.aliyuncs.com/img/20240604221559.png" alt="image.png"></p><p>我们可以将这个过程理解为<br>根据查找目标，设定<strong>循环不变式</strong>，在二分的过程中，不断扩大满足循环不变式条件的范围，直至将所有数据范围覆盖达到终止。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二分</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
